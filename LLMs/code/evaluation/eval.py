import json
import re

# List of fields to be evaluated
FIELDS = ['name', 'gender', 'missing_age', 'missing_height', 'missing_date', 'missing_location']

def extract_province(location):
    if not location:
        return None
    province = re.split(r'(省|市|自治区|特别行政区)', location)[0]
    
    if province.endswith('市'):
        province = province[:-1]
    return province.strip()

def is_field_match(field, std_value, gen_value):
    """字段匹配规则"""
   # When the standard value is empty, the generated value must be empty to be considered correct
    if std_value is None:
        return gen_value is None  
    # The standard value is not empty but the generated value is empty, which does not match
    if gen_value is None:
        return False  
    
    
    try:
        if field == 'missing_date':
            # year
            std_year = re.findall(r'\d{4}', str(std_value))[0]
            gen_year = re.findall(r'\d{4}', str(gen_value))[0]
            return std_year == gen_year
        
        elif field == 'missing_location':
            # province
            std_province = extract_province(str(std_value))
            gen_province = extract_province(str(gen_value))
            return std_province == gen_province
        
        else:
            # other
            return str(std_value).strip() == str(gen_value).strip()
    except (IndexError, TypeError):
        
        return False

def calculate_metrics(std_data, gen_data):
    total_correct = 0
    total_gen_fields = 0
    total_std_fields = 0

    std_text_map = {item['text']: item for item in std_data}

    for gen_item in gen_data:
        gen_text = gen_item['text']
        std_item = std_text_map.get(gen_text)
        if not std_item:
            continue

        for field in FIELDS:
            std_value = std_item['info'].get(field)
            gen_value = gen_item['info'].get(field)

           
            if std_value is not None:
                total_std_fields += 1

                
                if gen_value is not None:
                    total_gen_fields += 1

                
                if is_field_match(field, std_value, gen_value):
                    total_correct += 1

    # Calculate indicators
    precision = total_correct / total_gen_fields if total_gen_fields > 0 else 0
    recall = total_correct / total_std_fields if total_std_fields > 0 else 0
    f1 = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0

    return {
        'precision': round(precision, 4),
        'recall': round(recall, 4),
        'f1': round(f1, 4),
        'correct': total_correct,
        'gen_total': total_gen_fields,
        'std_total': total_std_fields
    }

# Load data
with open('/your Standard Dataset/path/', 'r', encoding='utf-8') as f:
    std_data = json.load(f)

with open('/your Dataset generated by large models/path/', 'r', encoding='utf-8') as f:
    gen_data = json.load(f)

try:
    metrics = calculate_metrics(std_data, gen_data)
    print(f"精确率 (Precision): {metrics['precision'] * 100:.2f}%")
    print(f"召回率 (Recall)   : {metrics['recall'] * 100:.2f}%")
    print(f"F1分数 (F1)      : {metrics['f1'] * 100:.2f}%")
    print("\n详细统计:")
    print(f"正确提取字段数: {metrics['correct']}")
    print(f"生成集总字段数: {metrics['gen_total']}")
    print(f"标准集总字段数: {metrics['std_total']}")
except ValueError as e:
    print(f"错误: {e}")